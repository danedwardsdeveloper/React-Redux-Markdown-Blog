[{"id":1714950000,"title":"HTML & CSS by Jon Duckett. Is it still relevant?","author":"Dan Edwards","date":"May 06, 2024","slug":"html-css-by-jon-duckett-is-it-still-relevant","authorSlug":"dan-edwards","tags":["Book review","HTML","CSS"],"preview":"\nI bought this book as it was recommended reading to accompany the Codecademy Full-Stack Engineer career pathway. I am usually very fast to reach for a book whenever I'm learning something new, but I must admit I was suspicious about such an old book on such a fast-changing subject.\n\nHowever I was pleasantly surprised by how relevant it all seemed, and it helped me to organise and solidify my existing understanding of these languages. The first working draft of HTML 5 was published in January 2008, and the book was published in 2011. While there have been plenty of additions, there isn't much that's depreciated or totally out of date. CSS, however, has come a long quite a way since th...","content":"\n**I bought this book as it was recommended reading to accompany the Codecademy Full-Stack Engineer career pathway. I am usually very fast to reach for a book whenever I'm learning something new, but I must admit I was suspicious about such an old book on such a fast-changing subject.**\n\nHowever I was pleasantly surprised by how relevant it all seemed, and it helped me to organise and solidify my existing understanding of these languages. The first working draft of HTML 5 was published in January 2008, and the book was published in 2011. While there have been plenty of additions, there isn't much that's depreciated or totally out of date. CSS, however, has come a long quite a way since the book's release, but the information is presently so nicely, and organised so well that I would recommend reading it if you are learning web development.\n\n## The good stuff\n\n#### Great overview of two languages\n\nThe book offers a well-thought out and nicely presented overview of what these two technologies can do. It can be really helpful to see the bigger picture early when you're trying to learn something new.\n\n#### Beautiful layouts\n\nI don't know what it is about software development books, but nearly all the ones I have are very big and heavy, but sparsely typeset. Despite being over 500 pages long, it's actually quite a quick read. The attention to layout and presentation makes a welcome change from official programming documentation with very little imagination given to these areas.\n\n#### Fantastic explanations\n\nDuckett clearly knows a thing or two about pedagogy, because he takes nothing for granted and explains everything clearly. Too often, once we've mastered a complex subject, we lose all memory of the effort we put in in order to get where we are today. Good teaching is about having empathy with your student, and imagining that you don't know the things you know now.\n\n## What's out of date\n\n#### HTML5 semantic elements\n\nThese are actually in the book, but in a section at the back (page 432). While a new practice when the book was first published, it's now well established and essential practice for keeping your code structured, clean and accessible. A modern web page should use tags like these as standard, not as an extra: `<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>` and `<footer>`.\n\n#### Flash player\n\nAdobe Flash Player was a platform that enabled websites to play video, but it is now [officially dead](https://www.lifewire.com/what-happened-to-flash-2617986). It has has been superseded by the html `<video>` element, and other video-hosting platforms, such as YouTube & Vimeo that allow you to embed videos on a web page easily without hosting huge files and worrying about encoding.\n\n#### Image formats\n\nOn the web, JPEG and PNG images are now being replaced with WebP and AVIF. These filetypes offer better compression which enables you to reduce the file size dramatically without losing too much quality, which in turn will make your sites load faster. WebP was developed by Google and currently has better browser support than AVIF.\n\n#### CSS blink\n\nSadly this incredibly annoying feature has been depreciated. [Homer Simpson's website](https://www.youtube.com/watch?v=HlX4T2SBkC0) could have used it to great effect.\n\n#### [960.gs](http://960.gs)\n\nThis CSS framework, referenced frequently throughout the book, allowed developers to use a grid layout system easily before CSS3 was widely supported. It was very popular in the early 2010s before features like Grid and Flexbox were introduced.\n\n## What's missing\n\n#### CSS Grid & Flexbox\n\nThese powerful features were only emerging when the book was published, and negate the need for a lot of hacky workarounds like using `float` for layout and `inline-block` for horizontal alignment.\n\n#### Responsive Design Enhancements\n\n##### Media Queries\n\nThe introduction of more sophisticated media queries with features like orientation and resolution detection give us even more fine-grained control for building responsive designs across various devices.\n\n##### Viewport Units (`vh`, `vw`, `vmin`, `vmax`):\n\nThese units, relative to the viewport size, simplified the creation of responsive layouts that scale proportionally with screen dimensions.\n\n##### Variables (Custom Properties)\n\n**CSS Variables:** Native variables in CSS allow you to define reusable values, making your stylesheets more dynamic and maintainable. This reduces repetition and eases style updates.\n\n- **Animations and Transitions**\n  - **CSS Transitions:** Smoothly transition property changes over a set duration, creating simple animations on hover or other interactions, without the need for JavaScript.\n  - **CSS Animations:** More powerful control over animations with `@keyframes`, allowing you to define complex, multi-step animation sequences directly within your stylesheets.\n  \n- **Other notable CSS updates**\n  - **Calc Function:** Allows calculations within CSS (e.g., `width: calc(100% - 20px);` for dynamic sizing).\n  - **Shapes:** Features for creating basic geometric shapes (`circle`, `polygon`) with CSS.\n  - **Filters and Blend Modes:** Graphical effects like `blur`, `grayscale`, `drop-shadow`, and blend modes for manipulating image and element appearance.\n\n**Overall, I'd say this is well worth a read, but not much use as a reference book. And I must say: don't bother buying this book new. I bought mine on Amazon for £19.99, but there are copies in very good condition on eBay for less than £3. It's also online as a [PDF](https://wtf.tw/ref/duckett.pdf).**\n\n**I have since come across a much better book: HTML, CSS & JavaScript in Easy Steps by Mike McGrath. Updated in 2020, this is a similar (weirdly almost identical in size and weight to the Duckett book) but much more up-to-date whistle-stop tour of the languages of web development.**\n"},{"id":1714777200,"title":"BEM - Structuring Your CSS for Clarity and Maintainability","author":"Google Gemini","date":"May 04, 2024","slug":"bem-structuring-your-css-for-clarity-and-maintainability","authorSlug":"google-gemini","tags":["CSS","BEM"],"preview":"\nIn the world of web development, managing CSS can quickly turn into a tangled mess as projects grow larger and teams expand. Stylesheets can become bloated, selectors overly specific, and naming conventions a source of confusion rather than clarity. BEM (Block-Element-Modifier) is a CSS naming methodology that tackles these issues head-on, providing a structured and modular approach to writing styles.\n\nThe Fundamentals of BEM\n\nBEM centers around three core concepts:\n\n- Block: A standalone, reusable component on a page (e.g., a menu, search bar, or card).\n- Element: A nested component within a Block, dependent on its parent for context (e.g., a navigation link within a menu, a...","content":"\nIn the world of web development, managing CSS can quickly turn into a tangled mess as projects grow larger and teams expand. Stylesheets can become bloated, selectors overly specific, and naming conventions a source of confusion rather than clarity. BEM (Block-Element-Modifier) is a CSS naming methodology that tackles these issues head-on, providing a structured and modular approach to writing styles.\n\n**The Fundamentals of BEM**\n\nBEM centers around three core concepts:\n\n- **Block:** A standalone, reusable component on a page (e.g., a menu, search bar, or card).\n- **Element:** A nested component within a Block, dependent on its parent for context (e.g., a navigation link within a menu, a search input within a search bar).\n- **Modifier:** A variation of a Block or Element, often used to represent different states or appearances (e.g., a disabled button, a highlighted menu item).\n\nBEM uses a double-hyphen (`--`) to separate Elements from their Blocks, and a double-underscore (`__`) to separate Modifiers from their Blocks or Elements. **Let's see an example:**\n\n```css\n.card {\n  /* Block */\n}\n.card__title {\n  /* Element */\n}\n.card__description {\n  /* Element */\n}\n.card--primary {\n  /* Modifier */\n}\n.card__title--disabled {\n  /* Modifier */\n}\n```\n\n**Benefits of Using BEM**\n\n1. **Modular Structure:** BEM promotes the creation of independent, self-contained components. This makes your CSS more portable and reusable, reducing code duplication and easing the process of moving or repositioning elements on your page.\n2. **Clear Naming and Specificity:** BEM class names clearly indicate the relationship between components and their purpose. This helps avoid complex, overly-specific CSS selectors, making styles less likely to clash with each other or unintentionally affect other areas of your site.\n3. **Scalability:** BEM's structured approach works well in larger projects. As projects grow, adding new elements or variations follows a consistent pattern, making it easier for teams to manage and extend the CSS codebase.\n4. **Improved Readability:** BEM names are self-describing and predictable. This means developers can easily understand the role and structure of components just by reading the class names, enhancing code review and debugging processes.\n5. **Team Collaboration:** The predictable nature of BEM class names ensures consistency across a team, promoting a common understanding of styles and making it easier for multiple developers to work on the same project simultaneously.\n\n**Adopting BEM in Your Projects**\n\nWhile adopting BEM can require an initial shift in thinking, the long-term benefits are significant. Here's how to integrate it:\n\n1. **Planning:** Before you start coding, identify the reusable components and potential variations within your UI design. This will give you a solid foundation for your BEM structure.\n2. **Naming Conventions:** Adhere to BEM's naming conventions strictly. Use descriptive and meaningful names that clarify the relationship between Blocks, Elements, and Modifiers.\n3. **Nesting:** Consider using a CSS preprocessor like Sass or Less to simplify writing BEM styles. Nested selectors mirror the Block-Element structure, making your code easier to read and maintain.\n\n**Overcoming Potential Challenges**\n\n- **Long Class Names:** One criticism of BEM is that it can lead to verbose class names. This can be mitigated by using abbreviations (when clear) and keeping Element names short and to the point.\n- **Inflexible Specificity:** In some cases, BEM's default specificity may need to be overridden. Be prepared to judiciously use more traditional specificity techniques when absolutely necessary.\n\n**BEM and Other Methodologies**\n\nBEM isn't the only solution for structuring CSS. Other methodologies like OOCSS (Object-Oriented CSS) and SMACSS (Scalable and Modular Architecture for CSS) exist. While BEM is highly focused on naming conventions, others prioritise broader style organisation strategies. It's worth exploring these alternatives to find the approach that fits best within your team's workflow.\n\n**Conclusion**\n\nBEM offers a powerful and systematic way to organise CSS, particularly for larger, more complex web development projects. Its focus on modularity, clarity, and scalability leads to better maintainability, making it an essential tool for modern web developers.\n"},{"id":1714690800,"title":"Codecademy - A Gateway to Coding. Pros and Cons","author":"Google Gemini","date":"May 03, 2024","slug":"codecademy-a-gateway-to-coding-pros-and-cons","authorSlug":"google-gemini","tags":["Codecademy"],"preview":"\nCodecademy stands as one of the most well-known platforms for beginners eager to embark on their coding journey. With its interactive lessons, gamified approach, and vast library of courses, Codecademy has helped countless individuals take their first steps into the world of programming. However, as with any learning platform, it's crucial to weigh both its strengths and limitations before diving in.\n\nPros of Learning with Codecademy\n\n1. Beginner-Friendly and Accessible: Codecademy is primarily designed for absolute beginners. Its lessons smoothly guide you through core concepts, providing instant feedback and using simple language that's easy to understand. Accessibility is anot...","content":"\nCodecademy stands as one of the most well-known platforms for beginners eager to embark on their coding journey. With its interactive lessons, gamified approach, and vast library of courses, Codecademy has helped countless individuals take their first steps into the world of programming. However, as with any learning platform, it's crucial to weigh both its strengths and limitations before diving in.\n\n**Pros of Learning with Codecademy**\n\n1. **Beginner-Friendly and Accessible:** Codecademy is primarily designed for absolute beginners. Its lessons smoothly guide you through core concepts, providing instant feedback and using simple language that's easy to understand. Accessibility is another key point; many courses are free, allowing exploration without financial commitment.\n2. **Interactive Environment:** One of Codecademy's biggest strengths is its interactive coding environment. You write code directly within the browser, receiving immediate results and hints when stuck. This eliminates the hurdle of setting up a local development environment, often a challenge for those unfamiliar with the process.\n3. **Gamified Learning:** Codecademy incorporates points, badges, and streaks to keep learners engaged. While some might find this approach distracting, for many, this gamification element can provide a sense of accomplishment and motivation.\n4. **Diverse Course Catalog:** The platform offers a wide array of programming languages and technologies. Popular choices include Python, JavaScript, HTML, CSS, SQL, and even more specialized areas such as data science and machine learning.\n5. **Community:** Codecademy boasts a large and active community of learners. Forums and discussion boards offer a space to ask questions, connect with fellow coders, and find support, fostering a sense of camaraderie.\n\n**Cons of Learning with Codecademy**\n\n1. **Limited Depth:** While excellent for getting your toes wet, Codecademy lessons sometimes prioritize hand-holding over in-depth understanding. Concepts are often simplified, potentially leading to gaps in fundamental knowledge as you progress to more advanced topics\n2. **Lack of Real-World Context:** Codecademy exercises often focus on isolated concepts. Without broader project-based learning, you may struggle to connect the dots of how individual skills translate into building real-world applications.\n3. **Absence of Instructor Support:** Most Codecademy courses are self-guided. While the community is helpful, the lack of direct instructor interaction can be an obstacle for learners who thrive on personalized guidance and tailored feedback.\n4. **Repetitive Exercises:** Codecademy's format can become repetitive for some. There's often a heavy emphasis on fill-in-the-blank and multiple-choice style exercises, potentially making learning feel less active and engaging over time.\n5. **Cost of Pro Version:** While many courses offer a free tier, deeper dives, quizzes, real-world projects, and some advanced features are only accessible with a paid Codecademy Pro membership.\n\n**Should You Use Codecademy?**\n\nDeciding if Codecademy is right for you depends on your learning style and goals:\n\n- **Ideal for:**\n  - Complete coding beginners looking for a gentle introduction.\n  - Testing the waters across various programming languages to find your niche.\n  - Learners who enjoy a gamified and structured environment.\n- **May Not Be the Best Fit for:**\n  - Those seeking in-depth theoretical knowledge and comprehensive explanations.\n  - Learners who want personalized instructor feedback and a less formulaic learning path.\n  - Individuals aiming to directly build complex, real-world projects\n\n**Codecademy in the Larger Learning Landscape**\n\nCodecademy is a fantastic starting point. However, as you advance, supplementing it with other resources becomes essential. Here are a few ideas:\n\n- **Documentation & Reference:** Get comfortable using official language documentation (e.g., MDN Web Docs for JavaScript).\n- **Project-Based Learning:** Build small projects of your own to apply and practice your knowledge.\n- **Open-Source Community:** Participate in open-source projects to experience real-world development workflows and collaboration.\n- **Other Platforms:** Consider platforms like Udemy, Coursera, or edX, which often offer instructor-led video courses and may provide a different learning environment.\n\n**Conclusion**\n\nCodecademy is a valuable tool in a programmer's toolbox, particularly for getting comfortable with the fundamentals. When combined with a proactive learning approach, it can be a powerful stepping stone on your coding journey.\n"},{"id":1714604400,"title":"Unlock the Power of React - A Beginner's Guide","author":"Google Gemini","date":"May 02, 2024","slug":"unlock-the-power-of-react-a-beginners-guide","authorSlug":"google-gemini","tags":["React","JavaScript"],"preview":"\nIn the realm of ever-evolving web development, React has risen as a dominant force. This JavaScript library, brought to life by Facebook, has revolutionised how we craft interactive and dynamic user interfaces. If you're eager to embark on your React journey, this article is your guiding light!\n\nWhy React?\n\n- Component-Based Architecture: At its core, React encourages you to break down complex interfaces into small, reusable components. Think of them like Lego bricks - you build your UI by assembling various components together. This keeps your code organised and easier to manage.\n- Virtual DOM: React features a clever virtual DOM (Document Object Model), which is an in-memory represe...","content":"\nIn the realm of ever-evolving web development, React has risen as a dominant force. This JavaScript library, brought to life by Facebook, has revolutionised how we craft interactive and dynamic user interfaces. If you're eager to embark on your React journey, this article is your guiding light!\n\n## Why React?\n\n- Component-Based Architecture: At its core, React encourages you to break down complex interfaces into small, reusable components. Think of them like Lego bricks - you build your UI by assembling various components together. This keeps your code organised and easier to manage.\n- Virtual DOM: React features a clever virtual DOM (Document Object Model), which is an in-memory representation of the actual webpage. React makes updates to this virtual DOM instead of directly to the browser's DOM. This results in efficient updates, minimising expensive re-renders for blazing-fast performance.\n- Declarative Style: With React, you declare **what** the UI should look like, rather than manually instructing **how** to change it. This leads to more readable and predictable code, and React handles the details of the updates.\n"},{"id":1714518000,"title":"CSS with Superpowers - A Dive into Sass","author":"Google Gemini","date":"May 01, 2024","slug":"css-with-superpowers-a-dive-into-sass","authorSlug":"google-gemini","tags":["Sass","CSS"],"preview":"\nIf you've been writing CSS for any length of time, you've likely encountered some of its limitations. Repetitive tasks, difficulty organising large stylesheets, and the lack of basic programming logic can make CSS development tedious. This is where Sass comes to the rescue!\n\nSass (Syntactically Awesome Style Sheets) is a powerful CSS preprocessor. Think of it as an upgrade to CSS - it extends the language with features that make writing stylesheets more efficient, maintainable, and enjoyable.\n\nWhy You Should Care about Sass\n\n1. Variables: Sass introduces variables, just like in regular programming languages. Define a value once and reuse it everywhere:\n\n   SCSS\n\n   `$primary-colo...","content":"\nIf you've been writing CSS for any length of time, you've likely encountered some of its limitations. Repetitive tasks, difficulty organising large stylesheets, and the lack of basic programming logic can make CSS development tedious. This is where Sass comes to the rescue!\n\nSass (Syntactically Awesome Style Sheets) is a powerful CSS preprocessor. Think of it as an upgrade to CSS - it extends the language with features that make writing stylesheets more efficient, maintainable, and enjoyable.\n\n**Why You Should Care about Sass**\n\n1. **Variables:** Sass introduces variables, just like in regular programming languages. Define a value once and reuse it everywhere:\n\n   SCSS\n\n   `$primary-color: #3498db;\n\n   body {\n   background-color: $primary-color;\n   }`\n\n2. **Nesting:** Replicate the natural hierarchy of your HTML within your CSS for better organization:\n\n   SCSS\n\n   `nav {\n   ul {\n   list-style-type: none;\n   }\n\n   li {\n   display: inline-block;\n   }\n   }`\n\n3. **Mixins:** Create reusable blocks of styles, like functions for your CSS:\n\n   SCSS\n\n   `@mixin border-radius($radius) {\n   border-radius: $radius;\n   }\n\n   button {\n   @include border-radius(5px);\n   }`\n\n4. **Logic and Calculations:** Sass supports basic programming concepts:\n\n   SCSS\n\n   `@for $i from 1 through 5 {\n  .item-#{$i} { width: 20% * $i; }\n}`\n\n**Getting Started with Sass**\n\nSince your browser reads regular CSS, you'll need to compile your Sass code (.scss or .sass files) into CSS. Here are common ways:\n\n- **Command Line:** Install the Sass compiler (https://sass-lang.com/install). Then, use a command like `sass input.scss output.css`\n- **Build Tools:** Webpack, Gulp, or other build tools can integrate Sass compilation.\n- **Online Tools:** CodePen and similar platforms support Sass.\n\n**A Practical Sass Example**\n\nLet's imagine a simple website structure with some common styling needs. Here's how Sass improves this scenario:\n\n**Basic CSS:**\n\nCSS\n\n`/* Variables */\nbody { background-color: #f8f8f8; }\nheader { background-color: #2980b9; color: #fff; }\nbutton { background-color: #2980b9;  border: none; color: #fff; padding: 10px 20px; }\nbutton:hover { background-color: #246a9b; }`\n\n**Enhanced with Sass:**\n\nSCSS\n\n`/_ Variables _/\n$primary-color: #2980b9;\n$darken-blue: darken($primary-color, 5%); // Sass function!\n\n/_ Structure _/\nbody { background-color: #f8f8f8; }\n\nheader {\nbackground-color: $primary-color;\ncolor: #fff;\n\nbutton {  \n background-color: $primary-color;  \n border: none;\ncolor: #fff;\npadding: 10px 20px;\n\n    &:hover { background-color: $darken-blue; }\n\n}\n}`\n\n**Benefits:**\n\n- **Organization:** Styles are logically grouped.\n- **Maintenance:** Changing the `$primary-color` updates all dependent styles.\n- **Readability:** Nesting and mixins make the code easier to understand.\n\n**Exploring Further**\n\nSass offers much more to enhance your CSS workflow:\n\n- **Modules and Imports:** Break stylesheets down into manageable files.\n- **Functions:** Create your own helper functions for complex calculations.\n- **Control Directives:** Use `@if`, `@for`, and `@each` for conditional logic and looping.\n\n**Leveling Up Your CSS Game**\n\nSass transforms CSS into a more powerful and structured language. It tackles common CSS headaches and streamlines your development process. If you're ready to step up your CSS game, Sass is an essential tool to have in your toolbox!\n"},{"id":1703462400,"title":"Web Accessibility in Practice | Beyond Checklists","author":"Google Gemini","date":"December 25, 2023","slug":"web-accessibility-in-practice-|-beyond-checklists","authorSlug":"google-gemini","tags":["Book review","Accessibility"],"preview":"\nWhile checklists based on the Web Content Accessibility Guidelines (WCAG) are essential tools, true accessibility goes deeper. It's about creating genuinely inclusive experiences for all users.\n\nKey Areas to Focus On\n\nEmpathy: Put yourself in the shoes of users with disabilities. How might they experience your website or app if they use screen readers, keyboard navigation, or other assistive technologies?\nSemantic HTML: Write code that prioritizes meaning. Use elements like header, nav, main, and article to give structure and context.\nImage Descriptions: Don't neglect alt text. Provide meaningful descriptions for images, especially those conveying information.\nColor Contrast: Ensure y...","content":"\nWhile checklists based on the Web Content Accessibility Guidelines (WCAG) are essential tools, true accessibility goes deeper. It's about creating genuinely inclusive experiences for all users.\n\n## Key Areas to Focus On\n\nEmpathy: Put yourself in the shoes of users with disabilities. How might they experience your website or app if they use screen readers, keyboard navigation, or other assistive technologies?\nSemantic HTML: Write code that prioritizes meaning. Use elements like header, nav, main, and article to give structure and context.\nImage Descriptions: Don't neglect alt text. Provide meaningful descriptions for images, especially those conveying information.\nColor Contrast: Ensure your color choices have sufficient contrast ratios to meet WCAG guidelines. This is essential for users with low vision.\nKeyboard Navigation: Test if all features of your site are operable without a mouse. Keyboard accessibility is vital for many users.\nBeyond the Technical\n\nUser Testing: Involve people with disabilities in testing. Their feedback is the best measure of how accessible your site really is.\nInclusive Language: Use clear, respectful language in your content. Avoid ableist terms and stereotypes.\nWhy Prioritize Accessibility?\n\nEthical Responsibility: Everyone deserves equal access to the web.\nGreater Reach: Accessible design expands your potential audience.\nImproved UX for All: Accessibility practices often lead to a better experience for everyone, not just those with disabilities.\nResources\n\nWeb Content Accessibility Guidelines (WCAG)\nWebAIM Introduction to Accessibility\nLet's Make the Web a Place for Everyone!\n"},{"id":1661986800,"title":"Book review | Clean Code by Robert C. Martin","author":"Dan Edwards","date":"September 01, 2022","slug":"book-review-|-clean-code-by-robert-c-martin","authorSlug":"dan-edwards","tags":["Book review","Best practice"],"preview":"\nRobert C. Martin's \"Clean Code\" is a cornerstone of software development literature, emphasizing the importance of writing not just functional code, but code that is readable, maintainable, and elegant. Uncle Bob, as he's known in the industry, doesn't just provide abstract principles—he dives deep into practical examples and refactoring techniques to transform messy code into maintainable masterpieces.\n\nKey Takeaways\n\nMeaningful Names: Your code should read like well-written prose. Variables, functions, and classes should accurately and unambiguously reveal their intent.\nFunctions as Building Blocks: Functions should be small, focused, and do one thing extraordinarily well. This prom...","content":"\nRobert C. Martin's \"Clean Code\" is a cornerstone of software development literature, emphasizing the importance of writing not just functional code, but code that is readable, maintainable, and elegant. Uncle Bob, as he's known in the industry, doesn't just provide abstract principles—he dives deep into practical examples and refactoring techniques to transform messy code into maintainable masterpieces.\n\n## Key Takeaways\n\nMeaningful Names: Your code should read like well-written prose. Variables, functions, and classes should accurately and unambiguously reveal their intent.\nFunctions as Building Blocks: Functions should be small, focused, and do one thing extraordinarily well. This promotes modularity and reusability.\nComments with Care: Good code should be self-explanatory. Comments should be used judiciously to clarify complexity, not compensate for poorly written code.\nCode Smells and Heuristics: Martin provides a catalog of common \"code smells,\" signs that something could be improved, and guidelines for fixing them.\nStrengths\n\nPractical Emphasis: This isn't about abstract theory. \"Clean Code\" is filled with before-and-after code examples illustrating the transformations.\nEngaging Style: Uncle Bob's writing is witty and conversational, making a potentially dry topic surprisingly enjoyable to read.\nUniversal Relevance: While many examples are Java-centric, the core principles of clean coding transcend specific languages.\nConsiderations\n\nDogmatism: Some of Martin's advice can feel a bit rigid. It's great to have guidelines, but knowing when to break the rules is a mark of expertise, too.\nTimeless but Dated: The book has been around for a while. Some references and technology discussions may feel slightly dated.\n\n## Should You Read It?\n\nAbsolutely! \"Clean Code\" is a worthwhile investment for developers of any experience level. Juniors will gain a strong foundation for writing better code from the outset. Seasoned professionals will likely find themselves nodding in agreement and revisiting their code with a renewed focus on clarity and maintainability.\n\nWhile \"Clean Code\" isn't the final word on software development, it's an essential guidepost on the journey towards becoming a software craftsman who takes pride in the code they create.\n"},{"id":1539644400,"title":"Book Review | Eloquent JavaScript by Marijn Haverbeke (4th Edition)","author":"Dan Edwards","date":"October 16, 2018","slug":"book-review-|-eloquent-javascript-by-marijn-haverbeke-4th-edition","authorSlug":"dan-edwards","tags":["Book review","JavaScript"],"preview":"\nThis is a fantastic book, but it's not for beginners. Haverbeke clearly knows a lot about JavaScript, but could brush up on his pedagogy, as there's no way you could learn JavaScript from reading this book alone.\n\nIs it worth reading\n\nAbsolutely. But it's less of a quick read, and more of a work book.\n","content":"\nThis is a fantastic book, but it's not for beginners. Haverbeke clearly knows a lot about JavaScript, but could brush up on his pedagogy, as there's no way you could learn JavaScript from reading this book alone.\n\n## Is it worth reading\n\nAbsolutely. But it's less of a quick read, and more of a work book.\n"},{"id":-11707631925,"title":"Sonnet 10","author":"William Shakespeare","date":"January 01, 1599","slug":"sonnet-10","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nFor shame deny that thou bear'st love to any,\nWho for thyself art so unprovident.\nGrant, if thou wilt, thou art beloved of many,\nBut that thou none lov'st is most evident.\nFor thou art so possessed with murd'rous hate\nThat 'gainst thyself thou stick'st not to conspire,\nSeeking that beauteous roof to ruinate\nWhich to repair should be thy chief desire.\nO, change thy thought, that I may change my mind.\nShall hate be fairer lodged than gentle love?\nBe as thy presence is, gracious and kind,\nOr to thyself at least kind-hearted prove.\nMake thee another self for love of me,\nThat beauty still may live in thine or thee.\n","content":"\nFor shame deny that thou bear'st love to any,\nWho for thyself art so unprovident.\nGrant, if thou wilt, thou art beloved of many,\nBut that thou none lov'st is most evident.\nFor thou art so possessed with murd'rous hate\nThat 'gainst thyself thou stick'st not to conspire,\nSeeking that beauteous roof to ruinate\nWhich to repair should be thy chief desire.\nO, change thy thought, that I may change my mind.\nShall hate be fairer lodged than gentle love?\nBe as thy presence is, gracious and kind,\nOr to thyself at least kind-hearted prove.\nMake thee another self for love of me,\nThat beauty still may live in thine or thee.\n"},{"id":-11739167925,"title":"Sonnet 9","author":"William Shakespeare","date":"January 01, 1598","slug":"sonnet-9","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nIs it for fear to wet a widow's eye\nThat thou consum'st thyself in single life?\nAh, if thou issueless shalt hap to die,\nThe world will wail thee like a makeless wife;\nThe world will be thy widow and still weep\nThat thou no form of thee hast left behind,\nWhen every private widow well may keep,\nBy children's eyes, her husband's shape in mind.\nLook what an unthrift in the world doth spend\nShifts but his place, for still the world enjoys it;\nBut beauty's waste hath in the world an end,\nAnd, kept unused, the user so destroys it.\nNo love toward others in that bosom sits\nThat on himself such murd'rous shame commits.\n","content":"\nIs it for fear to wet a widow's eye\nThat thou consum'st thyself in single life?\nAh, if thou issueless shalt hap to die,\nThe world will wail thee like a makeless wife;\nThe world will be thy widow and still weep\nThat thou no form of thee hast left behind,\nWhen every private widow well may keep,\nBy children's eyes, her husband's shape in mind.\nLook what an unthrift in the world doth spend\nShifts but his place, for still the world enjoys it;\nBut beauty's waste hath in the world an end,\nAnd, kept unused, the user so destroys it.\nNo love toward others in that bosom sits\nThat on himself such murd'rous shame commits.\n"},{"id":-11770703925,"title":"Sonnet 8","author":"William Shakespeare","date":"January 01, 1597","slug":"sonnet-8","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nMusic to hear, why hear'st thou music sadly?\nSweets with sweets war not, joy delights in joy.\nWhy lov'st thou that which thou receiv'st not gladly,\nOr else receiv'st with pleasure thine annoy?\nIf the true concord of well-tunèd sounds,\nBy unions married, do offend thine ear,\nThey do but sweetly chide thee, who confounds\nIn singleness the parts that thou shouldst bear.\nMark how one string, sweet husband to another,\nStrikes each in each by mutual ordering,\nResembling sire and child and happy mother\nWho, all in one, one pleasing note do sing;\nWhose speechless song, being many, seeming one,\nSings this to thee: “Thou single wilt prove none.”\n","content":"\nMusic to hear, why hear'st thou music sadly?\nSweets with sweets war not, joy delights in joy.\nWhy lov'st thou that which thou receiv'st not gladly,\nOr else receiv'st with pleasure thine annoy?\nIf the true concord of well-tunèd sounds,\nBy unions married, do offend thine ear,\nThey do but sweetly chide thee, who confounds\nIn singleness the parts that thou shouldst bear.\nMark how one string, sweet husband to another,\nStrikes each in each by mutual ordering,\nResembling sire and child and happy mother\nWho, all in one, one pleasing note do sing;\nWhose speechless song, being many, seeming one,\nSings this to thee: “Thou single wilt prove none.”\n"},{"id":-11802326325,"title":"Sonnet 7","author":"William Shakespeare","date":"January 01, 1596","slug":"sonnet-7","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nLo, in the orient when the gracious light\nLifts up his burning head, each under eye\nDoth homage to his new-appearing sight,\nServing with looks his sacred majesty;\nAnd having climbed the steep-up heavenly hill,\nResembling strong youth in his middle age,\nYet mortal looks adore his beauty still,\nAttending on his golden pilgrimage.\nBut when from highmost pitch with weary car\nLike feeble age he reeleth from the day,\nThe eyes, 'fore duteous, now converted are\nFrom his low tract and look another way.\nSo thou, thyself outgoing in thy noon,\nUnlooked on diest unless thou get a son.\n","content":"\nLo, in the orient when the gracious light\nLifts up his burning head, each under eye\nDoth homage to his new-appearing sight,\nServing with looks his sacred majesty;\nAnd having climbed the steep-up heavenly hill,\nResembling strong youth in his middle age,\nYet mortal looks adore his beauty still,\nAttending on his golden pilgrimage.\nBut when from highmost pitch with weary car\nLike feeble age he reeleth from the day,\nThe eyes, 'fore duteous, now converted are\nFrom his low tract and look another way.\nSo thou, thyself outgoing in thy noon,\nUnlooked on diest unless thou get a son.\n"},{"id":-11833862325,"title":"Sonnet 6","author":"William Shakespeare","date":"January 01, 1595","slug":"sonnet-6","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nThen let not winter's ragged hand deface\nIn thee thy summer ere thou be distilled.\nMake sweet some vial; treasure thou some place\nWith beauty's treasure ere it be self-killed.\nThat use is not forbidden usury\nWhich happies those that pay the willing loan;\nThat's for thyself to breed another thee,\nOr ten times happier, be it ten for one.\nTen times thyself were happier than thou art\nIf ten of thine ten times refigured thee;\nThen what could death do if thou shouldst depart,\nLeaving thee living in posterity?\nBe not self-willed, for thou art much too fair\nTo be death's conquest and make worms thine heir.\n","content":"\nThen let not winter's ragged hand deface\nIn thee thy summer ere thou be distilled.\nMake sweet some vial; treasure thou some place\nWith beauty's treasure ere it be self-killed.\nThat use is not forbidden usury\nWhich happies those that pay the willing loan;\nThat's for thyself to breed another thee,\nOr ten times happier, be it ten for one.\nTen times thyself were happier than thou art\nIf ten of thine ten times refigured thee;\nThen what could death do if thou shouldst depart,\nLeaving thee living in posterity?\nBe not self-willed, for thou art much too fair\nTo be death's conquest and make worms thine heir.\n"},{"id":-11865398325,"title":"Sonnet 5","author":"William Shakespeare","date":"January 01, 1594","slug":"sonnet-5","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nThose hours that with gentle work did frame\nThe lovely gaze where every eye doth dwell\nWill play the tyrants to the very same\nAnd that unfair which fairly doth excel;\nFor never-resting time leads summer on\nTo hideous winter and confounds him there,\nSap checked with frost and lusty leaves quite gone,\nBeauty o'er-snowed and bareness everywhere.\nThen, were not summer's distillation left\nA liquid prisoner pent in walls of glass,\nBeauty's effect with beauty were bereft,\nNor it nor no remembrance what it was.\nBut flowers distilled, though they with winter meet,\nLeese but their show; their substance still lives sweet.\n","content":"\nThose hours that with gentle work did frame\nThe lovely gaze where every eye doth dwell\nWill play the tyrants to the very same\nAnd that unfair which fairly doth excel;\nFor never-resting time leads summer on\nTo hideous winter and confounds him there,\nSap checked with frost and lusty leaves quite gone,\nBeauty o'er-snowed and bareness everywhere.\nThen, were not summer's distillation left\nA liquid prisoner pent in walls of glass,\nBeauty's effect with beauty were bereft,\nNor it nor no remembrance what it was.\nBut flowers distilled, though they with winter meet,\nLeese but their show; their substance still lives sweet.\n"},{"id":-11896934325,"title":"Sonnet 4","author":"William Shakespeare","date":"January 01, 1593","slug":"sonnet-4","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nUnthrifty loveliness, why dost thou spend\nUpon thyself thy beauty's legacy?\nNature's bequest gives nothing but doth lend,\nAnd being frank, she lends to those are free.\nThen, beauteous niggard, why dost thou abuse\nThe bounteous largess given thee to give?\nProfitless usurer, why dost thou use\nSo great a sum of sums yet canst not live?\nFor, having traffic with thyself alone,\nThou of thyself thy sweet self dost deceive.\nThen how, when nature calls thee to be gone,\nWhat acceptable audit canst thou leave?\nThy unused beauty must be tombed with thee,\nWhich usèd lives th' executor to be.\n","content":"\nUnthrifty loveliness, why dost thou spend\nUpon thyself thy beauty's legacy?\nNature's bequest gives nothing but doth lend,\nAnd being frank, she lends to those are free.\nThen, beauteous niggard, why dost thou abuse\nThe bounteous largess given thee to give?\nProfitless usurer, why dost thou use\nSo great a sum of sums yet canst not live?\nFor, having traffic with thyself alone,\nThou of thyself thy sweet self dost deceive.\nThen how, when nature calls thee to be gone,\nWhat acceptable audit canst thou leave?\nThy unused beauty must be tombed with thee,\nWhich usèd lives th' executor to be.\n"},{"id":-11928556725,"title":"Sonnet 3","author":"William Shakespeare","date":"January 01, 1592","slug":"sonnet-3","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nLook in thy glass and tell the face thou viewest\nNow is the time that face should form another,\nWhose fresh repair if now thou not renewest,\nThou dost beguile the world, unbless some mother.\nFor where is she so fair whose uneared womb\nDisdains the tillage of thy husbandry?\nOr who is he so fond will be the tomb\nOf his self-love, to stop posterity?\nThou art thy mother's glass, and she in thee\nCalls back the lovely April of her prime;\nSo thou through windows of thine age shalt see,\nDespite of wrinkles, this thy golden time.\nBut if thou live remembered not to be,\nDie single, and thine image dies with thee.\n","content":"\nLook in thy glass and tell the face thou viewest\nNow is the time that face should form another,\nWhose fresh repair if now thou not renewest,\nThou dost beguile the world, unbless some mother.\nFor where is she so fair whose uneared womb\nDisdains the tillage of thy husbandry?\nOr who is he so fond will be the tomb\nOf his self-love, to stop posterity?\nThou art thy mother's glass, and she in thee\nCalls back the lovely April of her prime;\nSo thou through windows of thine age shalt see,\nDespite of wrinkles, this thy golden time.\nBut if thou live remembered not to be,\nDie single, and thine image dies with thee.\n"},{"id":-11960092725,"title":"Sonnet 2","author":"William Shakespeare","date":"January 01, 1591","slug":"sonnet-2","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nWhen forty winters shall besiege thy brow\nAnd dig deep trenches in thy beauty's field,\nThy youth's proud livery, so gazed on now,\nWill be a tattered weed of small worth held.\nThen being asked where all thy beauty lies,\nWhere all the treasure of thy lusty days,\nTo say within thine own deep-sunken eyes\nWere an all-eating shame and thriftless praise.\nHow much more praise deserved thy beauty's use\nIf thou couldst answer “This fair child of mine\nShall sum my count and make my old excuse,”\nProving his beauty by succession thine.\nThis were to be new made when thou art old\nAnd see thy blood warm when thou feel'st it cold.\n","content":"\nWhen forty winters shall besiege thy brow\nAnd dig deep trenches in thy beauty's field,\nThy youth's proud livery, so gazed on now,\nWill be a tattered weed of small worth held.\nThen being asked where all thy beauty lies,\nWhere all the treasure of thy lusty days,\nTo say within thine own deep-sunken eyes\nWere an all-eating shame and thriftless praise.\nHow much more praise deserved thy beauty's use\nIf thou couldst answer “This fair child of mine\nShall sum my count and make my old excuse,”\nProving his beauty by succession thine.\nThis were to be new made when thou art old\nAnd see thy blood warm when thou feel'st it cold.\n"},{"id":-11991628725,"title":"Sonnet 1","author":"William Shakespeare","date":"January 01, 1590","slug":"sonnet-1","authorSlug":"william-shakespeare","tags":["Sonnet"],"preview":"\nFrom fairest creatures we desire increase,\nThat thereby beauty's rose might never die,\nBut, as the riper should by time decease,\nHis tender heir might bear his memory.\nBut thou, contracted to thine own bright eyes,\nFeed'st thy light's flame with self-substantial fuel,\nMaking a famine where abundance lies,\nThyself thy foe, to thy sweet self too cruel.\nThou that art now the world's fresh ornament\nAnd only herald to the gaudy spring\nWithin thine own bud buriest thy content\nAnd, tender churl, mak'st waste in niggarding.\nPity the world, or else this glutton be—\nTo eat the world's due, by the grave and thee.\n","content":"\nFrom fairest creatures we desire increase,\nThat thereby beauty's rose might never die,\nBut, as the riper should by time decease,\nHis tender heir might bear his memory.\nBut thou, contracted to thine own bright eyes,\nFeed'st thy light's flame with self-substantial fuel,\nMaking a famine where abundance lies,\nThyself thy foe, to thy sweet self too cruel.\nThou that art now the world's fresh ornament\nAnd only herald to the gaudy spring\nWithin thine own bud buriest thy content\nAnd, tender churl, mak'st waste in niggarding.\nPity the world, or else this glutton be—\nTo eat the world's due, by the grave and thee.\n"}]